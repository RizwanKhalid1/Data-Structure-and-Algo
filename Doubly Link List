#include<iostream>
#include<conio.h>
using namespace std;
class Node{
public:
	int data;
	Node* next;
	Node* prev;
};
class DList{
private:
	Node* head;
public:
	DList()
	{
		head = NULL;
	}

	bool isempty()
	{
		if (head == NULL)
			return true;
		else
			return false;
	}
	void insert_begin(int value)
	{
		Node* temp = new Node;
		temp->data = value;
		temp->prev = NULL;
		temp->next = NULL;
		Node* ptr;
		ptr = head;
		if (!isempty())
		{
			temp->next = ptr;
			ptr->prev = temp;
			head = temp;
		}
		else
		{
			head = temp;
		}

	}
	void display()
	{
		Node* temp;
		temp = head;
		while (temp != NULL)
		{
			cout << temp->data;
			temp = temp->next;
		}
	}
	void insert_end(int value)
	{
		Node* temp;
		temp = new Node;
		temp->data = value;
		temp->next = NULL;
		Node* ptr;
		ptr = head;
		if (!isempty())
		{
			while (ptr->next != NULL)
			{
				ptr = ptr->next;
			}
			ptr->next = temp;
			temp->prev = ptr;
			temp->next = NULL;
		}
		else
		{
			ptr->next = temp;
			temp->prev = ptr;
			temp->next = NULL;
		}
	}
	void insert_after(int oldV, int newV)
	{
		Node *p = new Node;
		p->next = NULL;
		p->prev = NULL;
		p->data = newV;
		if (!isempty())
		{
			Node *temp = head;
			while (temp != NULL && temp->data != oldV)
				temp = temp->next;
			if (temp != NULL && temp->data == oldV)
			{
				p->prev = temp;
				temp->next->prev = p;
				p->next = temp->next;
				temp->next = p;
			}
			else if (temp->data != oldV)
				cout << "Value not found" << endl;
			else if (temp == NULL)
				cout << "Value not found" << endl;
		}
	}

	void deleteNode(int value)
{
	if (!isempty())
	{
		Node *temp = head;
		while (temp != NULL && temp->data != value)
			temp = temp->next;
		if (temp == NULL && temp->data == value)
		{
			head = NULL;
			delete temp;
		}
		if (temp == NULL)
			cout << "Value not found" << endl;
		else
		{
			if (temp->prev == NULL)
			{
				head = temp->next;
				temp->next->prev = NULL;
				delete temp;
			}
			else if (temp->next != NULL)
			{
				temp->prev->next = temp->next;
				temp->next->prev = temp->prev;
				delete temp;
			}
			else if (temp->next == NULL)
			{
				temp->prev->next = NULL;
				delete temp;
			}
		}
	}
}

};
void main()
{
	DList l;
	l.insert_begin(3);
	l.insert_begin(2);
	l.insert_begin(6);
	l.insert_end(5);
	l.insert_end(8);
	l.insert_after(2, 1);
	l.display();
	_getch();
}
