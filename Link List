#include<iostream>
#include<conio.h>
using namespace std;
class Node{
public:
	int data;
	Node* next;
};
class List{
	Node* head;
public:
	List()
	{
		head = NULL;
	}
	Node* newnode(int d)
	{
		Node * temp = new Node;
		temp->data = d;
		temp->next = NULL;
		return temp;
	}
	void insertfirst(int d)
	{
		Node* temp = head;
		Node* ptr = newnode(d);
		if (temp == NULL)
		{
			head=ptr;
		}
		else
		{
			ptr->next = temp;
			head = ptr;
		}
	}
	void deletefirst()
	{
		Node* temp = head;
		if (temp == NULL)
		{
			cout << "List is Empty!!!";
		}
		else
		{
			head = head->next;
			delete temp;
		}
	}
	void insertlast(int v)
	{
		Node* temp = head;
		Node* ptr = newnode(v);
		
	
		
			while (temp->next != NULL)
			{
				temp=temp->next;
			}
			temp->next = ptr;
			ptr->next = NULL;

	}
	void deletelast()
	{
		Node* temp = head;
		Node* pred = NULL;
		if (temp == NULL)
		{
			cout << "list is Empty!!!";
		}
		else
		{
			while (temp->next != NULL)
			{
				pred = temp;
				temp = temp->next;
			}
			pred->next = NULL;
			delete temp;
		}

	}
	void insertafter(int oldv, int newv)
	{
		Node* temp = head;
		bool flag = true;
		Node* ptr = newnode(newv);
		if (head == NULL)
		{
			cout << "Link lIst is Empty!!!";
		}
		else
		{
			while (temp->data != oldv)
			{
				temp = temp->next;
				if (temp == NULL)
				{
					flag = false;
					cout << "Element not Exist!!!!";
				}
			}
			ptr->next = temp->next;
			temp->next = ptr;
			
		}
	}
	void deleteafter(int oldv, int newv)
	{
		bool flag = false;
		Node* temp = head;
		if (temp == NULL||temp->next==NULL)
		{
			cout << "List is Empty!!!!";
		}
		else
		{
			while (temp->next != NULL)
			{
				if (temp->data == oldv&&temp->next->data == newv)
				{
					flag = true;
					Node* ptr = temp->next;
					temp->next = ptr->next;
					delete ptr;
				}
				else
					temp = temp->next;
			}
			if (flag == false)
			{
				cout << "Elememnt cann't be deleted!!!!";
			}
		}

	}
	void display()
	{
		Node* temp = head;
		while (temp != NULL)
		{
			cout << temp->data << endl;
			temp = temp->next;
		}	
	}
};
void main()
{
	List l;
	l.insertfirst(2);
	l.insertfirst(4);
	l.insertfirst(3);
	l.insertlast(8);
	l.deletelast();
	l.insertafter(4, 5);
	l.deleteafter(3, 4);
	//l.deletefirst();
	l.display();
	_getch();
}


