
                    Using Adjlist 
************************************************************************************************

#include<iostream>
#include<conio.h>
using namespace std;
class Node{
public:
	int data;
	Node* next;
};
class List{
public:
	Node* head;
};
class Graph{
private:
	int v;
	List* arr;
	void DFS(int d, bool temp[])
	{
		temp[d] = true;
		cout << d << " ";
		Node* ptr = arr[d].head;
		while (ptr != NULL)
		{
			if (temp[ptr->data] != true)
			{
				DFS(ptr->data, temp);
			}
			ptr = ptr->next;
		}
	}
public:
	Graph(int vertices)
	{
		v = vertices;
		arr = new List[v];
		for (int i = 0; i < vertices; i++)
		{
			arr[i].head = NULL;
		}
	}
	Node* createlist(int d)
	{
		Node* temp = new Node;
		temp->data = d;
		temp->next = NULL; 
		return temp;
	}
	void addEdge(int src, int d)
	{
		Node* temp = arr[src].head;
		Node* ptr = createlist(d);
		if (temp == NULL)
		{
			arr[src].head = ptr;
		}
		else
		{
			while (temp->next != NULL)
			{
				temp = temp->next;
			}
			temp->next = ptr;
		}
	}
	void print()
	{
		for (int i = 0; i < v; i++)
		{
			Node* temp = arr[i].head;
			cout << i << "-> ";
			while (temp != NULL)
			{
				cout << temp->data << " ->";
				temp = temp->next;
			}
			cout << endl;
		}
	}
	void isEdge(int src, int d)
	{
		Node* temp = arr[src].head;
		while (temp != NULL)
		{
			if (temp->data == d)
				cout << "found!!!!";
			else
				cout << "NOT Found!!!";
			temp = temp->next;
		}
	}
	void undirectedGraph(int src,int d)
	{
		Node* temp = createlist(src);
		temp->next = arr[d].head;
		arr[d].head = temp;
		
		addEdge(src, d);
	
	}
	void DFS()
	{
		bool* temp = new bool[v];
		for (int i = 0; i < v; i++)
		{
			temp[i] = false;
			DFS(1, temp);
		}
		
	}
	
};
int main()
{
	Graph g(5);
	//g.addEdge(1, 3);
	//g.addEdge(4, 2);
	//g.addEdge(2, 3);
	//g.addEdge(1, 4);
	//g.addEdge(3, 4);
	g.undirectedGraph(1, 3);
	g.undirectedGraph(2, 4);
	g.print();
	//g.isEdge(1, 4);
	cout << "Depth first search:" << endl;
	g.DFS();
	_getch();
	return 0;
}



               Using AdjMatrix
************************************************************************************************



#include<iostream>
#include<conio.h>
using namespace std;
class Graph{
private:
	int v;
	bool** arr;

public:
	Graph(int vertices)
	{
		v = vertices;
		arr = new bool*[v];
		for (int i = 0; i < vertices; i++)
		{
			arr[i] = new bool;
		}
		for (int i = 0; i < vertices; i++)
		{
			for (int j = 0; j < vertices; j++)
			{
				arr[i][j] = 0;
			}
		}
	}
	void addEdge(int i, int j)
	{
		arr[i][j] = 1;
		arr[j][i] = 1;
	}
	void removeEdge(int i, int j)
	{
		arr[i][j] = 0;
	}
	void isEdge(int i, int j)
	{
		if (arr[i][j] == 1)
			cout << "found!!!";
		else
			cout << "Not Found!!!";
	}
	void print()
	{
		for (int i = 0; i < v; i++)
		{
			for (int j = 0; j < v; j++)
			{
				cout << arr[i][j] << " ";
			}
			cout << endl;
		}
	}
};
void main()
{
	Graph g(4);
	g.addEdge(1, 3);
	g.addEdge(2, 3);
	g.print();
	_getch();
}

